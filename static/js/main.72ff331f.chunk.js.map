{"version":3,"sources":["Layout/Header.js","utils/api/index.js","Layout/home/CreateDeckButton.js","Layout/home/ViewDeckButton.js","Layout/home/StudyDeckButton.js","Layout/home/DeleteDeckButton.js","Layout/home/Home.js","Layout/decks-study/StudyScreenBreadcrumbNavBar.js","Layout/decks-study/FlipButton.js","Layout/decks-study/NextButton.js","Layout/decks-study/AddCardsButton.js","Layout/decks-study/StudyCard.js","Layout/decks-study/Study.js","Layout/decks-new/CreateDeckCancelButton.js","Layout/decks-new/CreateDeckScreen.js","Layout/decks/DeckScreenBreadcrumbNavBar.js","Layout/decks/DeckScreenDeleteDeckButton.js","Layout/decks/DeckScreenCard.js","Layout/decks/DeckInfo.js","Layout/decks/DeckScreen.js","Layout/decks-edit/EditDeckScreenBreadcrumbNavBar.js","Layout/decks-edit/EditDeckCancelButton.js","Layout/decks-edit/EditDeckScreen.js","Layout/decks-cards/new/AddCardScreenBreadcrumbNavBar.js","Layout/decks-cards/CardForm.js","Layout/decks-cards/new/AddCardDoneButton.js","Layout/decks-cards/new/AddCardScreen.js","Layout/decks-cards/edit/EditCardScreenBreadcrumbNavBar.js","Layout/decks-cards/edit/EditCardCancelButton.js","Layout/decks-cards/edit/EditCardScreen.js","Layout/NotFound.js","Layout/Layout.js","App.js","index.js"],"names":["Header","className","API_BASE_URL","process","headers","Headers","stripCards","deck","cards","fetchJson","url","options","onCancel","a","fetch","response","status","Error","statusText","json","name","console","error","stack","Promise","resolve","listDecks","signal","method","body","JSON","stringify","readDeck","deckId","updatedDeck","id","deleteDeck","card","Number","readCard","cardId","updatedCard","append","CreateDeckButton","history","useHistory","type","onClick","push","ViewDeckButton","StudyDeckButton","DeleteDeckButton","window","confirm","href","Home","useState","decks","setDecks","useEffect","decksFromAPI","loadDecks","map","index","length","description","StudyScreenBreadcrumbNavBar","to","FlipButton","setIsFrontOfCard","currentSide","NextButton","NextCardHandler","AddCardsButton","StudyCard","currentCard","setCurrentCard","cardCount","setCardCount","isFrontOfCard","useRouteMatch","front","back","currentCount","Study","setDeck","setCards","useParams","deckFromAPI","loadDeck","CreateDeckCancelButton","CreateDeckScreen","setName","handleNamechange","event","target","value","onSubmit","preventDefault","createDeck","then","newDeck","htmlFor","placeholder","onChange","rows","DeckScreenBreadcrumbNavBar","deckName","DeckScreenDeleteDeckButton","DeckScreenCard","handleDeleteCardClick","deleteCard","cardDisplay","DeckInfo","deckDescription","DeckScreen","path","EditDeckScreenBreadcrumbNavBar","EditDeckCancelButton","EditDeckScreen","setDeckName","setDeckDescription","updateDeck","AddCardScreenBreadcrumbNavBar","CardForm","cardFront","handleCardFrontChange","cardBack","handleCardBackChange","AddCardDoneButton","AddCardScreen","setCardFront","setCardBack","createCard","EditCardScreenBreadcrumbNavBar","EditCardCancelButton","EditCardScreen","preExistingCard","setPreExistingCard","cardFromAPI","loadCard","updateCard","NotFound","Layout","exact","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.72ff331f.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Header() {\n  return (\n    <header className=\"jumbotron bg-dark\">\n      <div className=\"container text-white\">\n        <h1 className=\"display-4\">Flashcard-o-matic</h1>\n        <p className=\"lead\">Discover The Flashcard Difference.</p>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;\n","/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:5000\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  default value returned if the fetch is cancelled.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    return await response.json();\n\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options, {});\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options, updatedDeck);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Retrieves all cards associated with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to a possible empty array of cards.\n */\nexport async function listCards(deckId, signal) {\n  const url = `${API_BASE_URL}/cards?deckId=${deckId}`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options, card);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options, updatedCard);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction CreateDeckButton() {\n  const history = useHistory();\n  return (\n    <button\n      type=\"button\"\n      className=\"btn btn-success mb-3 btn-lg\"\n      onClick={() => history.push(\"/decks/new\")}\n    >\n      <span className=\"oi oi-plus\" />\n      Create Deck\n    </button>\n  );\n}\n\nexport default CreateDeckButton;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction ViewDeckButton({ deck }) {\n  const history = useHistory();\n\n  return (\n    <button\n      type=\"button\"\n      className=\"btn btn-dark mr-2\"\n      onClick={() => history.push(`/decks/${deck.id}`)}\n    >\n      <span className=\"oi oi-eye\" /> View\n    </button>\n  );\n}\n\nexport default ViewDeckButton;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction StudyDeckButton({ deck }) {\n  const history = useHistory();\n  return (\n    <button\n      type=\"button\"\n      className=\"btn btn-primary mr-2\"\n      onClick={() => history.push(`/decks/${deck.id}/study`)}\n    >\n      <span className=\"oi oi-book\" /> Study\n    </button>\n  );\n}\n\nexport default StudyDeckButton;\n","import React from \"react\";\nimport { deleteDeck } from \"../../utils/api/index\";\n\nfunction DeleteDeckButton({ deck }) {\n  // When the user clicks the \"Delete\" button, the warning message below is shown.\n\n  // If the user clicks \"OK\", the deck is deleted and the will no longer be visible\n\n  // on the Home screen\n\n  const handleTrashClick = () => {\n    if (\n      window.confirm(\"Delete this deck? You will not be able to recover it. \")\n    ) {\n      deleteDeck(deck.id);\n    }\n  };\n\n  return (\n    <button type=\"button\" className=\"btn btn-danger\" onClick={handleTrashClick}>\n      {/* Using the anchor element to trigger the home page to refresh after deleting \n      the deck. This causes the deleted deck to no longer be displayed on the Home screen */}\n      <a href=\"/\" className=\"text-white\">\n        <span className=\"oi oi-trash\" />\n      </a>\n    </button>\n  );\n}\n\nexport default DeleteDeckButton;\n","import React, { useEffect, useState } from \"react\";\nimport { listDecks } from \"../../utils/api/index\";\n\nimport CreateDeckButton from \"./CreateDeckButton\";\nimport ViewDeckButton from \"./ViewDeckButton\";\nimport StudyDeckButton from \"./StudyDeckButton\";\nimport DeleteDeckButton from \"./DeleteDeckButton\";\n\nfunction Home() {\n  const [decks, setDecks] = useState([]);\n\n  // Loading all of the decks from the API\n\n  useEffect(() => {\n    async function loadDecks() {\n      const response = listDecks();\n      const decksFromAPI = await response;\n      setDecks(decksFromAPI);\n    }\n    loadDecks();\n  }, []);\n\n  return (\n    <div>\n      <CreateDeckButton />\n      {/* Creating a Bootstrap card for each deck and the associated buttons */}\n      {decks.map((deck, index) => {\n        return (\n          <div className=\"deck-card card mt-2\" key={index}>\n            <div className=\"card-body\">\n              <div className=\"d-flex justify-content-between\">\n                <h5 className=\"card-title font-weight-bold\">{deck.name}</h5>\n                <h6 className=\"card-subtitle text-muted\">\n                  {deck.cards.length} cards\n                </h6>\n              </div>\n              <p className=\"card-text\">{deck.description}</p>\n              <div className=\"d-flex\">\n                <div className=\"mr-auto\">\n                  <ViewDeckButton deck={deck} />\n                  <StudyDeckButton deck={deck} />\n                </div>\n                <div>\n                  <DeleteDeckButton deck={deck} />\n                </div>\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n}\n\nexport default Home;\n","import React from \"react\";\nimport { Link } from 'react-router-dom';\n\nfunction StudyScreenBreadcrumbNavBar({ deckId, deck }) {\n  return (\n    <nav aria-label=\"breadcrumb\">\n      <ol className=\"breadcrumb\">\n        <li className=\"breadcrumb-item\">\n          <Link to=\"/\"><span className=\"oi oi-home\"/> Home</Link>\n        </li>\n        <li className=\"breadcrumb-item\">\n          <Link to={`/decks/${deckId}`}>{deck.name}</Link>\n        </li>\n        <li className=\"breadcrumb-item active\" aria-current=\"page\">\n          Study\n        </li>\n      </ol>\n    </nav>\n  );\n}\n\nexport default StudyScreenBreadcrumbNavBar;\n","import React from \"react\";\n\nfunction FlipButton({ setIsFrontOfCard }) {\n  const flipCardHandler = () => {\n    setIsFrontOfCard((currentSide) => !currentSide);\n  };\n\n  return (\n    <button type=\"button\" className=\"btn btn-dark mr-2\" onClick={flipCardHandler}>\n      Flip\n    </button>\n  );\n}\n\nexport default FlipButton;\n","import React from \"react\";\n\nfunction NextButton({ NextCardHandler }) {\n  return (\n    <button type=\"button\" className=\"btn btn-success\" onClick={NextCardHandler}>\n      Next\n    </button>\n  );\n}\n\nexport default NextButton;\n","import React from \"react\";\nimport { useHistory } from \"react-router\";\n\nfunction AddCardsButton({ deckId }) {\n  const history = useHistory();\n  return (\n    <button\n      type=\"button\"\n      className=\"btn btn-success\"\n      onClick={() => history.push(`/decks/${deckId}/cards/new`)}\n    >\n      <span className=\"oi oi-plus\" /> Add Cards\n    </button>\n  );\n}\n\nexport default AddCardsButton;\n","import React, { useState } from \"react\";\nimport { useHistory, useRouteMatch } from \"react-router\";\n\nimport FlipButton from \"./FlipButton\";\nimport NextButton from \"./NextButton\";\nimport AddCardsButton from \"./AddCardsButton\";\n\nfunction StudyCard({ cards, currentCard, setCurrentCard, deckId }) {\n  const [cardCount, setCardCount] = useState(1);\n  const [isFrontOfCard, setIsFrontOfCard] = useState(true);\n\n  const history = useHistory();\n  const { url } = useRouteMatch();\n\n  // Function to handle clicks of the Next button\n  const NextCardHandler = () => {\n    // Keeping track of which card in the deck the user is currently viewing\n    if (cardCount < cards.length) {\n      setIsFrontOfCard((currentSide) => !currentSide);\n      setCurrentCard(cards[cardCount]);\n      setCardCount((currentCount) => currentCount + 1);\n    } else {\n      // Once the user has reached the final card in the deck, they will be prompted to either restart\n      // the deck of cards, or return to the home page\n      if (\n        window.confirm(\n          \"Restart cards? Click 'cancel' to return to the home page.\"\n        )\n      ) {\n        setIsFrontOfCard((currentSide) => !currentSide);\n        setCurrentCard(cards[0]);\n        setCardCount(1);\n        history.push(url);\n      } else {\n        history.push(\"/\");\n      }\n    }\n  };\n\n  // If there are less than 3 cards in a deck, the user will be prompted to add cards to the deck\n  if (cards.length < 3) {\n    return (\n      <div>\n        <h4 className=\"text-danger font-weight-bold\">Not enough cards!</h4>\n        <p>\n          You need at least 3 cards to study. There are {cards.length} cards in\n          this deck.\n        </p>\n        <AddCardsButton deckId={deckId} />\n      </div>\n    );\n  }\n\n  // Renders the front of the card and the \"Flip\" button if isFrontOfCard is true\n  if (isFrontOfCard) {\n    return (\n      <div className=\"deck-card card\">\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">\n            Card {cardCount} of {cards.length}\n          </h5>\n          <p className=\"font-weight-bold font-italic mb-0\">Front:</p>\n          <p className=\"card-text\">{currentCard.front}</p>\n          <FlipButton setIsFrontOfCard={setIsFrontOfCard} />\n        </div>\n      </div>\n    );\n  }\n  // Renders the back of the card and the \"Flip\" and \"Next\" buttons if isFrontOfCard is false\n  return (\n    <div className=\"deck-card card\">\n      <div className=\"card-body\">\n        <h5 className=\"card-title\">\n          Card {cardCount} of {cards.length}\n        </h5>\n        <p className=\"font-weight-bold font-italic mb-0\">Back:</p>\n        <p className=\"card-text\">{currentCard.back}</p>\n        <FlipButton setIsFrontOfCard={setIsFrontOfCard} />\n        <NextButton NextCardHandler={NextCardHandler} />\n      </div>\n    </div>\n  );\n}\n\nexport default StudyCard;\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { readDeck } from \"../../utils/api/index\";\nimport StudyScreenBreadcrumbNavBar from \"./StudyScreenBreadcrumbNavBar\";\nimport StudyCard from \"./StudyCard\";\n\nfunction Study() {\n  const [deck, setDeck] = useState({});\n  const [cards, setCards] = useState([]);\n  const [currentCard, setCurrentCard] = useState({});\n  const deckId = useParams().deckId;\n  // Loading the specified deck from the API\n  useEffect(() => {\n    async function loadDeck() {\n      const response = readDeck(deckId);\n      const deckFromAPI = await response;\n      setDeck(deckFromAPI);\n      setCards(deckFromAPI.cards);\n      setCurrentCard(deckFromAPI.cards[0]);\n    }\n    loadDeck();\n  }, [deckId]);\n\n  return (\n    <div>\n      <StudyScreenBreadcrumbNavBar deckId={deckId} deck={deck} />\n      <h2 className=\"mb-4\">Study: {deck.name}</h2>\n      <StudyCard\n        cards={cards}\n        currentCard={currentCard}\n        setCurrentCard={setCurrentCard}\n        deckId={deckId}\n      />\n    </div>\n  );\n}\n\nexport default Study;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction CreateDeckCancelButton() {\n  const history = useHistory();\n\n  return (\n    <button\n      type=\"button\"\n      className=\"btn btn-dark mr-2\"\n      onClick={() => history.push(\"/\")}\n    >\n      Cancel\n    </button>\n  );\n}\n\nexport default CreateDeckCancelButton;\n","import React, { useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { createDeck } from \"../../utils/api/index\";\nimport { Link } from \"react-router-dom\";\n\n// import CreateDeckBreadcrumbNavBar from \"./CreateDeckBreadcrumbNavBar\";\n\nimport CreateDeckCancelButton from \"./CreateDeckCancelButton\";\n\nfunction CreateDeckScreen() {\n  const [name, setName] = useState(\"\");\n  const history = useHistory();\n\n  // Handling changes to the deck's name and description in the form\n\n  const handleNamechange = (event) => setName(event.target.value);\n\n  // Adding new deck to the database. Saved deck will have an \"id\" property\n\n  // Clicking submit will then take the user to that deck's screen\n\n  const handleCreateDeckSubmit = (event) => {\n    event.preventDefault();\n    createDeck({\n      name: name,\n      description: name,\n    }).then((newDeck) => history.push(`/decks/${newDeck.id}`));\n  };\n\n  //adding breadscrumb bar\n  return (\n    <div>\n      <nav aria-label=\"breadcrumb\">\n        <ol className=\"breadcrumb\">\n          <li className=\"breadcrumb-item\">\n            <Link to=\"/\">\n              <span className=\"oi oi-home\" /> Home\n            </Link>\n          </li>\n          <li className=\"breadcrumb-item active\" aria-current=\"page\">\n            Create Deck\n          </li>\n        </ol>\n      </nav>\n      <h2>Create Deck</h2>\n\n      <form onSubmit={handleCreateDeckSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"deckName\">Name</label>\n          <input\n            id=\"deckName\"\n            type=\"text\"\n            name=\"deckName\"\n            className=\"form-control\"\n            placeholder=\"Deck Name\"\n            onChange={handleNamechange}\n            value={name}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"deckDescription\">Description</label>\n          <textarea\n            id=\"deckDescription\"\n            name=\"deckDescription\"\n            className=\"form-control\"\n            placeholder=\"Brief description of the deck\"\n            rows=\"5\"\n            onChange={handleNamechange}\n            value={name}\n          />\n        </div>\n        <CreateDeckCancelButton />\n        <button type=\"submit\" className=\"btn btn-success\">\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default CreateDeckScreen;\n","import React from \"react\";\nimport { Link } from 'react-router-dom';\n\nfunction DeckScreenBreadcrumbNavBar({ deckName }) {\n  return (\n    <nav aria-label=\"breadcrumb\">\n      <ol className=\"breadcrumb\">\n        <li className=\"breadcrumb-item\">\n          <Link to=\"/\"><span className=\"oi oi-home\"/> Home</Link>\n        </li>\n        <li className=\"breadcrumb-item active\" aria-current=\"page\">\n          {deckName}\n        </li>\n      </ol>\n    </nav>\n  );\n}\n\nexport default DeckScreenBreadcrumbNavBar;\n","import React, { useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { deleteDeck } from \"../../utils/api/index\";\n\nfunction DeckScreenDeleteDeckButton({ deckId }) {\n  const history = useHistory();\n\n  /* When the user clicks on the \"Delete\" button associated with a particular deck, they\n  will be given the warning message below. If the user clicks \"OK\", the deck is deleted\n  and is no longer visible on the Home screen */\n  const handleTrashClick = () => {\n    if (\n      window.confirm(\"Delete this deck? You will not be able to recover it.\")\n    ) {\n      deleteDeck(deckId).then(() => history.push(\"/\"));\n    }\n  };\n\n  return (\n    <button type=\"button\" className=\"btn btn-danger\" onClick={handleTrashClick}>\n      <span className=\"oi oi-trash\" />\n    </button>\n  );\n}\n\nexport default DeckScreenDeleteDeckButton;\n\n//using this for practice.\n\n// 1. load a list of\n// 2. display the list on the screen.\n// 3. when an X is clicked on, it will display the Y associated with X\n\n// //useEffect(() => {\n//   fetch(\"https://jsonplaceholder.typicode.com/users/1\")\n//     .then((response) => response.json())\n//     .then(setUser);\n// }, []);\n//보통 이모양\n// you get changed data when you click.\n//\n\n// just quick note. I just want to understand how the other code routers, useEffect(API) useState works rather than trying to spend too much time on the UI. for UI, let's just look at it.\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { deleteCard } from \"../../utils/api/index\";\n\nfunction DeckScreenCard({ cards, deckId, url }) {\n  const history = useHistory();\n\n  /* When the user clicks the \"Delete\" button associated with a card, this warning message will show.\n  If the user clicks \"OK\", the card is deleted using deleteCard() */\n  const handleDeleteCardClick = (card) => {\n    if (\n      window.confirm(\"Delete this card? You will not be able to recover it.\")\n    ) {\n      deleteCard(card.id);\n    }\n  };\n\n  // Creates a Bootstrap card for each card in the deck with an edit and delete button\n\n  const cardDisplay = cards.map((card, index) => {\n    return (\n      <div className=\"deck-card card mt-2\" key={index}>\n        <div className=\"card-body row\">\n          <div className=\"col-md-5 pl-3\">\n            <p className=\"font-weight-bold\">Front:</p>\n            <p className=\"card-text \">{card.front}</p>\n          </div>\n          <div className=\"col-md-5 ml-auto\">\n            <p className=\"font-weight-bold\">Back:</p>\n            <p className=\"card-text\">{card.back}</p>\n          </div>\n        </div>\n        <hr />\n        <div className=\"ml-auto mt-2\">\n          <button\n            type=\"button\"\n            className=\"btn btn-dark mr-2\"\n            onClick={() =>\n              history.push(`/decks/${deckId}/cards/${card.id}/edit`)\n            }\n          >\n            <span className=\"oi oi-pencil\" /> Edit\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-danger\"\n            onClick={() => handleDeleteCardClick(card)}\n          >\n            {/* The anchor element will trigger the page to refresh after the card has been deleted.\n            This makes it so that the refreshed page will no longer display the deleted card. */}\n            <a href={url} className=\"text-white\">\n              <span className=\"oi oi-trash\" />\n            </a>\n          </button>\n        </div>\n      </div>\n    );\n  });\n\n  // If there are cards in this deck, they will render. If not, the following message will return instead.\n  if (cards.length) {\n    return <div>{cardDisplay}</div>;\n  } else {\n    return \"There are no cards in this deck yet!\";\n  }\n}\n\nexport default DeckScreenCard;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport DeckScreenDeleteDeckButton from \"./DeckScreenDeleteDeckButton\";\nimport DeckScreenCard from \"./DeckScreenCard\";\n\n// This component displays all of a specific deck's info and the buttons used to interact with the deck\nfunction DeckInfo({ deckName, deckDescription, deckId, cards, url }) {\n  const history = useHistory();\n\n  return (\n    <div>\n      <h2>{deckName}</h2>\n      <p>{deckDescription}</p>\n      <div className=\"d-flex mb-4\">\n        <div className=\"mr-auto\">\n          <button\n            type=\"button\"\n            className=\"btn btn-dark mr-2\"\n            onClick={() => history.push(`/decks/${deckId}/edit`)}\n          >\n            <span className=\"oi oi-pencil\" /> Edit\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-primary mr-2\"\n            onClick={() => history.push(`/decks/${deckId}/study`)}\n          >\n            <span className=\"oi oi-book\" /> Study\n          </button>\n          <button\n            type=\"button\"\n            className=\"btn btn-success\"\n            onClick={() => history.push(`/decks/${deckId}/cards/new`)}\n          >\n            <span className=\"oi oi-plus\" /> Add Cards\n          </button>\n        </div>\n        <div>\n          <DeckScreenDeleteDeckButton deckId={deckId} />\n        </div>\n      </div>\n\n      <div>\n        <h3>Cards</h3>\n        {/* Renders the cards in the deck and the edit card and delete card buttons */}\n        <DeckScreenCard cards={cards} deckId={deckId} url={url} />\n      </div>\n    </div>\n  );\n}\n\nexport default DeckInfo;\n","import React, { useEffect, useState } from \"react\";\nimport { Route, useParams, useRouteMatch } from \"react-router-dom\";\nimport { readDeck } from \"../../utils/api/index\";\nimport DeckScreenBreadcrumbNavBar from \"./DeckScreenBreadcrumbNavBar\";\nimport DeckInfo from \"./DeckInfo\";\n\nfunction DeckScreen() {\n  const [deck, setDeck] = useState({});\n  const [cards, setCards] = useState([]);\n  const deckId = useParams().deckId;\n  // useParams returns an object of key/value pairs of URL parameters. Use it to access match.params of the current <Route>.\n  const { url } = useRouteMatch();\n\n  // The useRouteMatch hook attempts to match the current URL in the same way that a <Route> would. It’s mostly useful for getting access to the match data without actually rendering a <Route>.\n\n  // loading the specified deck from the API\n  useEffect(() => {\n    async function loadDeck() {\n      const response = readDeck(deckId);\n      const deckFromAPI = await response;\n      //가져와서, 정보를 deck, card에 저장한거야.\n      setDeck(deckFromAPI);\n      setCards(deckFromAPI.cards);\n    }\n    loadDeck();\n  }, [deckId]);\n\n  // If the deck has been fetched from the API, the breadcrumb nav bar and deck info will display\n  if (deck.name) {\n    return (\n      <div>\n        <DeckScreenBreadcrumbNavBar deckName={deck.name} />\n        <Route path={url}>\n          <DeckInfo\n            deckName={deck.name}\n            deckDescription={deck.description}\n            deckId={deckId}\n            cards={cards}\n            url={url}\n          />\n        </Route>\n      </div>\n    );\n  }\n  return \"Loading...\";\n}\n\nexport default DeckScreen;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction EditDeckScreenBreadcrumbNavBar({ deckName, deckId }) {\n  return (\n    <nav aria-label=\"breadcrumb\">\n      <ol className=\"breadcrumb\">\n        <li className=\"breadcrumb-item\">\n          <Link to=\"/\"><span className=\"oi oi-home\"/> Home</Link>\n        </li>\n        <li className=\"breadcrumb-item\">\n          <Link to={`/decks/${deckId}`}>{deckName}</Link>\n        </li>\n        <li className=\"breadcrumb-item active\" aria-current=\"page\">\n          Edit Deck\n        </li>\n      </ol>\n    </nav>\n  );\n}\n\nexport default EditDeckScreenBreadcrumbNavBar;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction EditDeckCancelButton({ deckId }) {\n  const history = useHistory();\n\n  return (\n    <button\n      type=\"button\"\n      className=\"btn btn-dark mr-2\"\n      onClick={() => history.push(`/decks/${deckId}`)}\n    >\n      Cancel\n    </button>\n  );\n}\n\nexport default EditDeckCancelButton;\n","import React, { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { readDeck, updateDeck } from \"../../utils/api/index\";\n\nimport EditDeckScreenBreadcrumbNavBar from \"./EditDeckScreenBreadcrumbNavBar\";\nimport EditDeckCancelButton from \"./EditDeckCancelButton\";\n\nfunction EditDeckScreen() {\n  const [deckName, setDeckName] = useState(\"\");\n  const [deckDescription, setDeckDescription] = useState(\"\");\n\n  const history = useHistory();\n  const deckId = useParams().deckId;\n\n  // loading the specified deck from the API\n  useEffect(() => {\n    async function loadDeck() {\n      const response = readDeck(deckId);\n      const deckFromAPI = await response;\n      setDeckName(deckFromAPI.name);\n      setDeckDescription(deckFromAPI.description);\n    }\n    loadDeck();\n  }, [deckId]);\n\n  // Handling changes to the deck name and deck description in the form\n  const handleDeckNameChange = (event) => setDeckName(event.target.value);\n  const handleDeckDescriptionChange = (event) =>\n    setDeckDescription(event.target.value);\n\n  // Updating the pre-existing deck with the changes to the deck name and description\n  // Clicking submit will take the user to that deck's screen\n  const handleEditDeckSubmit = (event) => {\n    event.preventDefault();\n    updateDeck({\n      id: deckId,\n      name: deckName,\n      description: deckDescription,\n    }).then((updatedDeck) => history.push(`/decks/${updatedDeck.id}`));\n  };\n\n  return (\n    <div>\n      <EditDeckScreenBreadcrumbNavBar deckName={deckName} deckId={deckId} />\n      <h2>Edit Deck</h2>\n      <form onSubmit={handleEditDeckSubmit}>\n        <div className=\"form-group\">\n          <label htmlFor=\"deckName\">Name</label>\n          <input\n            id=\"deckName\"\n            type=\"text\"\n            name=\"deckName\"\n            className=\"form-control\"\n            onChange={handleDeckNameChange}\n            value={deckName}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label htmlFor=\"deckDescription\">Description</label>\n          <textarea\n            id=\"deckDescription\"\n            name=\"deckDescription\"\n            className=\"form-control\"\n            rows=\"5\"\n            onChange={handleDeckDescriptionChange}\n            value={deckDescription}\n          />\n        </div>\n        <EditDeckCancelButton deckId={deckId} />\n        <button type=\"submit\" className=\"btn btn-success\">\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default EditDeckScreen;\n","import React from \"react\";\nimport { Link } from 'react-router-dom';\n\nfunction AddCardScreenBreadcrumbNavBar({ deckName, deckId }) {\n  return (\n    <nav aria-label=\"breadcrumb\">\n      <ol className=\"breadcrumb\">\n        <li className=\"breadcrumb-item\">\n          <Link to=\"/\"><span className=\"oi oi-home\"/> Home</Link>\n        </li>\n        <li className=\"breadcrumb-item\">\n            <Link to={`/decks/${deckId}`}>{deckName}</Link>\n        </li>\n        <li className=\"breadcrumb-item active\" aria-current=\"page\">\n          Add Card\n        </li>\n      </ol>\n    </nav>\n  );\n}\n\nexport default AddCardScreenBreadcrumbNavBar;\n","import React from \"react\";\n\n// Component to be used in both the Add Card and Edit Card Screens\n\nfunction CardForm({ cardFront, handleCardFrontChange, cardBack, handleCardBackChange }) {\n  return (\n    <div>\n      <div className=\"form-group\">\n        <label htmlFor=\"cardFront\">Front</label>\n        <textarea\n          id=\"cardFront\"\n          name=\"cardFront\"\n          className=\"form-control\"\n          placeholder=\"Front side of card\"\n          rows=\"3\"\n          onChange={handleCardFrontChange}\n          value={cardFront}\n        />\n      </div>\n      <div className=\"form-group\">\n        <label htmlFor=\"cardBack\">Back</label>\n        <textarea\n          id=\"cardBack\"\n          name=\"cardBack\"\n          className=\"form-control\"\n          placeholder=\"Back side of card\"\n          rows=\"3\"\n          onChange={handleCardBackChange}\n          value={cardBack}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default CardForm;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction AddCardDoneButton({ deckId }) {\n  const history = useHistory();\n\n  return (\n    <button\n      type=\"button\"\n      className=\"btn btn-dark mr-2\"\n      onClick={() => history.push(`/decks/${deckId}`)}\n    >\n      Done\n    </button>\n  );\n}\n\nexport default AddCardDoneButton;\n","import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { readDeck, createCard } from \"../../../utils/api/index\";\n\nimport AddCardScreenBreadcrumbNavBar from \"./AddCardScreenBreadcrumbNavBar\";\nimport CardForm from \"../CardForm\";\nimport AddCardDoneButton from \"./AddCardDoneButton\";\n\nfunction AddCardScreen() {\n  const [deck, setDeck] = useState({});\n  const [cardFront, setCardFront] = useState(\"\");\n  const [cardBack, setCardBack] = useState(\"\");\n  const deckId = useParams().deckId;\n\n  // Loading the deck from the API\n  useEffect(() => {\n    async function loadDeck() {\n      const response = readDeck(deckId);\n      const deckFromAPI = await response;\n      setDeck(deckFromAPI);\n    }\n    loadDeck();\n  }, [deckId]);\n\n  // Handling changes to the card front and card back from the form\n  const handleCardFrontChange = (event) => setCardFront(event.target.value);\n  const handleCardBackChange = (event) => setCardBack(event.target.value);\n\n  // When the user clicks on the \"Save\" button, the new card will be created using createCard()\n  // The textarea for the card front and back will be cleared and the process for adding a\n  // card is restarted.\n  const handleAddCardSave = (event) => {\n    event.preventDefault();\n    createCard(deckId, { front: cardFront, back: cardBack });\n    setCardFront(\"\");\n    setCardBack(\"\");\n  };\n\n  // If the deck was properly fetched from the API, the following will render properly.\n  // Otherwise, \"Loading...\" will display\n  if (deck.name) {\n    return (\n      <div>\n        <AddCardScreenBreadcrumbNavBar deckName={deck.name} deckId={deckId} />\n        <h2>{deck.name}: Add Card</h2>\n        <form onSubmit={handleAddCardSave}>\n          <CardForm\n            cardFront={cardFront}\n            handleCardFrontChange={handleCardFrontChange}\n            cardBack={cardBack}\n            handleCardBackChange={handleCardBackChange}\n          />\n          <AddCardDoneButton deckId={deckId} />\n          <button type=\"submit\" className=\"btn btn-success\">\n            Save\n          </button>\n        </form>\n      </div>\n    );\n  }\n  return \"Loading...\";\n}\n\nexport default AddCardScreen;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction EditCardScreenBreadcrumbNavBar({ deckName, deckId, cardId }) {\n  return (\n    <nav aria-label=\"breadcrumb\">\n      <ol className=\"breadcrumb\">\n        <li className=\"breadcrumb-item\">\n          <Link to=\"/\">\n            <span className=\"oi oi-home\" />\n            Home\n          </Link>\n        </li>\n        <li className=\"breadcrumb-item\">\n          <Link to={`/decks/${deckId}`}>Deck: {deckName}</Link>\n        </li>\n        <li className=\"breadcrumb-item active\" aria-current=\"page\">\n          Edit Card {cardId}\n        </li>\n      </ol>\n    </nav>\n  );\n}\n\nexport default EditCardScreenBreadcrumbNavBar;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nfunction EditCardCancelButton({ deckId }) {\n  const history = useHistory();\n\n  return (\n    <button\n      type=\"button\"\n      className=\"btn btn-dark mr-2\"\n      onClick={() => history.push(`/decks/${deckId}`)}\n    >\n      Cancel\n    </button>\n  );\n}\n\nexport default EditCardCancelButton;\n","import React, { useEffect, useState } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { readDeck, readCard, updateCard } from \"../../../utils/api/index\";\n\nimport EditCardScreenBreadcrumbNavBar from \"./EditCardScreenBreadcrumbNavBar\";\nimport CardForm from \"../CardForm\";\nimport EditCardCancelButton from \"./EditCardCancelButton\";\n\nfunction EditCardScreen() {\n  const [deck, setDeck] = useState({});\n  const [preExistingCard, setPreExistingCard] = useState({});\n  const [cardFront, setCardFront] = useState(\"\");\n  const [cardBack, setCardBack] = useState(\"\");\n\n  const deckId = useParams().deckId;\n  const cardId = useParams().cardId;\n  const history = useHistory();\n\n  useEffect(() => {\n    // function to load the deck from the API\n    async function loadDeck() {\n      const response = readDeck(deckId);\n      const deckFromAPI = await response;\n      setDeck(deckFromAPI);\n    }\n\n    // function to load the card from the API\n    async function loadCard() {\n      const response = readCard(cardId);\n      const cardFromAPI = await response;\n      setPreExistingCard(cardFromAPI);\n      setCardFront(cardFromAPI.front);\n      setCardBack(cardFromAPI.back);\n    }\n    loadDeck();\n    loadCard();\n  }, [deckId, cardId]);\n\n  // handling form changes\n  const handleCardFrontChange = (event) => setCardFront(event.target.value);\n  const handleCardBackChange = (event) => setCardBack(event.target.value);\n\n  // Updating the card with the changes to the front and back of the card\n  // Clicking submit will also then take the user back to that deck's screen\n  const handleEditCardSubmit = (event) => {\n    event.preventDefault();\n    updateCard({ ...preExistingCard, front: cardFront, back: cardBack })\n      .then((updatedCard) => history.push(`/decks/${updatedCard.deckId}`));\n  };\n\n  return (\n    <div>\n      <EditCardScreenBreadcrumbNavBar\n        deckName={deck.name}\n        deckId={deckId}\n        cardId={cardId}\n      />\n      <h2>Edit Card</h2>\n      <form onSubmit={handleEditCardSubmit}>\n        <CardForm\n          cardFront={cardFront}\n          handleCardFrontChange={handleCardFrontChange}\n          cardBack={cardBack}\n          handleCardBackChange={handleCardBackChange}\n        />\n        <EditCardCancelButton deckId={deckId} />\n        <button type=\"submit\" className=\"btn btn-success\">\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default EditCardScreen;\n","import React from \"react\";\n\nfunction NotFound() {\n  return (\n    <div className=\"NotFound\">\n      <h1>Not Found</h1>\n    </div>\n  );\n}\n\nexport default NotFound;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Header from \"./Header\";\nimport Home from \"./home/Home\";\nimport Study from \"./decks-study/Study\";\nimport CreateDeckScreen from \"./decks-new/CreateDeckScreen\";\nimport DeckScreen from \"./decks/DeckScreen\";\nimport EditDeckScreen from \"./decks-edit/EditDeckScreen\";\nimport AddCardScreen from \"./decks-cards/new/AddCardScreen\";\nimport EditCardScreen from \"./decks-cards/edit/EditCardScreen\";\nimport NotFound from \"./NotFound\";\n\nfunction Layout() {\n  // className=\"container card\"\n  return (\n    <>\n      <Header />\n      <div>\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n\n          <Route path=\"/decks/new\">\n            <CreateDeckScreen />\n          </Route>\n\n          <Route path=\"/decks/:deckId/cards/new\">\n            <AddCardScreen />\n          </Route>\n\n          <Route path=\"/decks/:deckId/cards/:cardId/edit\">\n            <EditCardScreen />\n          </Route>\n\n          <Route path=\"/decks/:deckId/edit\">\n            <EditDeckScreen />\n          </Route>\n\n          <Route path=\"/decks/:deckId/study\">\n            <Study />\n          </Route>\n\n          <Route path=\"/decks/:deckId\">\n            <DeckScreen />\n          </Route>\n\n          <Route>\n            <NotFound />\n          </Route>\n        </Switch>\n      </div>\n    </>\n  );\n}\n\nexport default Layout;\n","import React from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Layout from \"./Layout/Layout\";\r\n// import \"./App.css\";\r\n\r\n/**\r\n * App is a wrapper for <Layout>, you should not need to change this file.\r\n */\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Switch>\r\n        <Route path=\"/\">\r\n          <Layout />\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}